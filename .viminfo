# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~MSle0~/color

# Command Line History (newest to oldest):
:wq
:w
:source ~/.vimrc
:reload

# Search String History (newest to oldest):
?/color
? color

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
""1	LINE	0
	# CoreV
"2	LINE	0
	
	[submodule ".vim/bundle/delimitMate"]
	        path = .vim/bundle/delimitMate
	        url = https://github.com/Raimondi/delimitMate.git
	
	[submodule ".vim/bundle/supertab"]
	        path = .vim/bundle/supertab
	        url = https://github.com/ervandew/supertab.git
	
	[submodule ".vim/bundle/syntastic"]
	        path = .vim/bundle/syntastic
	        url = https://github.com/scrooloose/syntastic.git
	
	[submodule ".vim/bundle/vim-javascript-syntax"]
	        path = .vim/bundle/vim-javascript-syntax
	        url = https://github.com/jelera/vim-javascript-syntax.git
	
	[submodule ".vim/bundle/JavaScript-Indent"]
	        path = .vim/bundle/JavaScript-Indent
	        url = https://github.com/vim-scripts/JavaScript-Indent.git
	
	[submodule ".vim/bundle/Dockerfile"]
	        path = .vim/bundle/Dockerfile
	        url = https://github.com/ekalinin/Dockerfile.vim.git
	
	[submodule "/Users/davd/.vim/bundle/vim-go"]
	        path = /Users/davd/.vim/bundle/vim-go
	        url = https://github.com/fatih/vim-go.git
	[submodule ".vim/bundle/php.vim"]
		path = .vim/bundle/php.vim
		url = https://github.com/StanAngeloff/php.vim.git
	[submodule ".vim/bundle/vim-ruby"]
		path = .vim/bundle/vim-ruby
		url = https://github.com/vim-ruby/vim-ruby.git
	[submodule ".vim/bundle/vim-fugitive"]
		path = .vim/bundle/vim-fugitive
		url = git://github.com/tpope/vim-fugitive.git
	[submodule ".vim/bundle/vim-rails"]
		path = .vim/bundle/vim-rails
		url = git://github.com/tpope/vim-rails.git
	[submodule ".vim/bundle/vim-airline"]
		path = .vim/bundle/vim-airline
		url = https://github.com/vim-airline/vim-airline
	[submodule ".vim/bundle/vim-bufferline"]
		path = .vim/bundle/vim-bufferline
		url = https://github.com/bling/vim-bufferline
	[submodule ".vim/bundle/vim-airline-themes"]
		path = .vim/bundle/vim-airline-themes
		url = https://github.com/vim-airline/vim-airline-themes
	[submodule ".vim/bundle/base16-vim"]
"3	LINE	0
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" PROMOTE VARIABLE TO RSPEC LET
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	function! PromoteToLet()
	  :normal! dd
	  " :exec '?^\s*it\>'
	  :normal! P
	  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
	  :normal ==
	endfunction
	:command! PromoteToLet :call PromoteToLet()
	:map <leader>p :PromoteToLet<cr>
	
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" EXTRACT VARIABLE (SKETCHY)
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	function! ExtractVariable()
	    let name = input("Variable name: ")
	    if name == ''
	        return
	    endif
	    " Enter visual mode (not sure why this is needed since we're already in
	    " visual mode anyway)
	    normal! gv
	
	    " Replace selected text with the variable name
	    exec "normal c" . name
	    " Define the variable on the line above
	    exec "normal! O" . name . " = "
	    " Paste the original selected text to be the variable value
	    normal! $p
	endfunction
	vnoremap <leader>rv :call ExtractVariable()<cr>
	
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" INLINE VARIABLE (SKETCHY)
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	function! InlineVariable()
	    " Copy the variable under the cursor into the 'a' register
	    :let l:tmp_a = @a
	    :normal "ayiw
	    " Delete variable and equals sign
	    :normal 2daW
	    " Delete the expression into the 'b' register
	    :let l:tmp_b = @b
	    :normal "bd$
	    " Delete the remnants of the line
	    :normal dd
	    " Go to the end of the previous line so we can start our search for the
	    " usage of the variable to replace. Doing '0' instead of 'k$' doesn't
"4	LINE	0
	V""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" Test quickfix list management
	"
	" If the tests write a tmp/quickfix file, these mappings will navigate through
	" it
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	function! GetBufferList()
	  redir =>buflist
	  silent! ls
	  redir END
	  return buflist
	endfunction
	
	function! BufferIsOpen(bufname)
	  let buflist = GetBufferList()
	  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
	    if bufwinnr(bufnum) != -1
	      return 1
	    endif
	  endfor
	  return 0
	endfunction
	
	function! ToggleQuickfix()
	  if BufferIsOpen("Quickfix List")
	    cclose
	  else
	    call OpenQuickfix()
	  endif
	endfunction
	
	function! OpenQuickfix()
	  cgetfile tmp/quickfix
	  topleft cwindow
	  if &ft == "qf"
	      cc
	  endif
	endfunction
	
	nnoremap <leader>q :call ToggleQuickfix()<cr>
	nnoremap <leader>Q :cc<cr>
	nnoremap <leader>j :cnext<cr>
	nnoremap <leader>k :cprev<cr>
	
"5	LINE	0
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" Md5 COMMAND
	" Show the MD5 of the current buffer
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	command! -range Md5 :echo system('echo '.shellescape(join(getline(<line1>, <line2>), '\n')) . '| md5')
	
"6	LINE	0
	
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" RUNNING TESTS
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	function! MapCR()
	  nnoremap <cr> :call RunTestFile()<cr>
	endfunction
	call MapCR()
	nnoremap <leader>T :call RunNearestTest()<cr>
	nnoremap <leader>a :call RunTests('')<cr>
	nnoremap <leader>c :w\|:!script/features<cr>
	nnoremap <leader>w :w\|:!script/features --profile wip<cr>
	
	function! RunTestFile(...)
	    if a:0
	        let command_suffix = a:1
	    else
	        let command_suffix = ""
	    endif
	
	    " Run the tests for the previously-marked file.
	    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|test_.*\.py\|_test.py\)$') != -1
	    if in_test_file
	        call SetTestFile(command_suffix)
	    elseif !exists("t:grb_test_file")
	        return
	    end
	    call RunTests(t:grb_test_file)
	endfunction
	
	function! RunNearestTest()
	    let spec_line_number = line('.')
	    call RunTestFile(":" . spec_line_number)
	endfunction
	
	function! SetTestFile(command_suffix)
	    " Set the spec file that tests will be run for.
	    let t:grb_test_file=@% . a:command_suffix
	endfunction
	
	function! RunTests(filename)
	    " Write the file and run tests for the given filename
	    if expand("%") != ""
	      :w
	    end
	    if match(a:filename, '\.feature$') != -1
	        exec ":!script/features " . a:filename
	    else
	        " First choice: project-specific test script
	        if filereadable("script/test")

# File marks:
'0  1  0  ~/dotfiles/.gitmodules
'1  1  19  ~/.vimrc
'2  131  19  ~/.vimrc
'3  130  0  ~/.vimrc

# Jumplist (newest first):
-'  1  0  ~/dotfiles/.gitmodules
-'  1  19  ~/.vimrc
-'  131  19  ~/.vimrc
-'  130  0  ~/.vimrc
-'  53  0  ~/.vimrc
-'  1  19  ~/.vimrc
-'  131  19  ~/.vimrc
-'  130  0  ~/.vimrc
-'  53  0  ~/.vimrc

# History of marks within files (newest to oldest):

> ~/dotfiles/.gitmodules
	"	1	0
	.	1	0
	+	4	0
	+	14	0
	+	13	58
	+	1	0

> ~/.vimrc
	"	1	19
	^	131	20
	.	131	19
	+	2	32
	+	255	0
	+	283	0
	+	204	0
	+	130	26
	+	132	0
	+	130	26
	+	132	0
	+	130	26
	+	130	1
	+	130	27
	+	132	1
	+	130	0
	+	132	0
	+	130	26
	+	132	0
	+	131	19
